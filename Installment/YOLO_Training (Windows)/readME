Windows YOLO Training!!


//*************************************** Video References ***************************************//
1) https://www.youtube.com/watch?v=saDipJR14Lc&t=247s 
2) https://www.youtube.com/watch?v=_4A9inxGqRM
3) https://www.youtube.com/watch?v=zJDUhGL26iU&t=383s
4) https://www.youtube.com/watch?v=_fqpYLM6SCw&t=1s


//********************************* Installment of Git and Darknet for Windows *******************************//
1) open up link:   https://git-scm.com/download/win
2) Download 32 or 64-bit Windows Setup
3) Follow to install setup:   https://phoenixnap.com/kb/how-to-install-git-windows
*Gits default editor is user chose

Test Git:________________ 
1) In homepage click Windows Key + x then press i when open 
*Launches Windows Powershell

2) Go to desired directory and make a new directory called "repos" 

3)command: mkdir repos 
*Build a new folder named "repos" in the directory location

4)command: cd repos
*Enter the folder named "repos"

5)command: repos> git clone https://github.com/AlexeyAB/darknet.git 
*Download the darknet github files to repos folder


//******************************* Installment of CUDA for Windows *******************************//

Requirements:________
    Visual Studio
    Python 3.7 
    CMake
    Graphic Card
    *********** If not grphic card then skip this installment ******************

*CUDA is used for graphic card interface when training and/or launcihng model
*OpenCV is used for realtime computation predictions for models for both training and launching model

*Check if your windows machine has a graphic cards by searching "device manager" 
*Select "Display Adapter" and search if NVIDIA is presented
**Graphic card for training at the moment is NVIDIA GeForce GTX 1650 with Max-Q Design

*If graphic card is present google "CUDA wiki" and under GPUs supported search the graphic
*Note Computer Capability Version of the graphic card
**Our case is Version 7.5, meaing CUDA SDK 10.0/10.2 or lastest 11.0 will work

*Search "CUDA <Version>" and download with settings: Windows + x86_64 + Version 10
*Following the window prompts until done installing

Test CUDA:____________
1) Follow https://docs.nvidia.com/cuda/cuda-quick-start-guide/index.html
2) Reference https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html


OR 

1) Open C: ProgramData > NVIDIA Corporation > CUDA Samples > v11.0 > 5_Simulations > nbody

2) Select "nbody_vs<VS Version>" where VS Version is the version of current VS of the machine

3) In VS Code, now Build > Build Solution

4) When done building navigate to  C: ProgramData > NVIDIA Corporation > CUDA Samples > v11.0 > bin > win64 > Debug 

5) Launch nbody.exe for CUDA testing
*Launches CUDA example video

6)To check CUDA version 
6.1) command: C: nvcc -V


//*************************** Installment of OpenCV for Windows *******************************//
Requirements:________ 
    Python 3.7
    pip  
    CMake
    Visual Studio
   
Run commands on window terminal:

1) command: pip uninstall opencv-python
*Uninstalls openCV if installed already on machine

2) Download "Sources" zip for OpenCV 4.1.2 from https://opencv.org/releases 
*Downloads the BASE of OpenCV
**Can use the lastest OpenCV version but problems might arise when installing 

3) Download zip for OpenCV_contrib from https://github.com/opencv/opencv_contrib/tree/4.1.2
*Download OpenCV extra modules

4) Create a folder named "OpenCV" at desired directory (C:\...)

5) Extract the zip files to OpenCV folder, 
           ...OpenCV\opencv-4.1.2
            ...OpenCV\opencv_contrib-4.1.2
            
6) Make a new folder in OpenCV called "build"
            ...OpenCV\build
            
7) Launch CMAKE and set parameters to the following:
            Where is the source code: .../OpenCV/opencv-4.1.2
            Where to build the binaries .../OpenCV/build
            ** Make sure to link the entire directory location **
            
            *Configure then select machine architecture, Window X64 = X64 
            
8) When done, search for "OPENCV_EXTRA_MODULES_PATH" and link to    
            ...OpenCV\opencv_contrib-4.1.2/modules
            Then configure again
            
9)*IF STILL RED BOXES APPEAR THEN RECONFIGURE ONCE AGAIN*
    Now, in NO red boxes appear then click Generate
  
10) Navigate to ...OpenCV\build\
       Click on OpenCV.sln file
       *Opens the OpenCV files to Visual Studio 
       
11) Change Visual Studio mode to "Release" by drop down menu

12) Click on CMakeTargets and right click on "ALL BUILD" and select "Build"

13) If no errors then right click on "INSTALL " and select "Build"

 
Test OpenCV:____________

1) command: python
*launchs python on terminal

2) python: >> import cv2
*If error then openCV was not install properly

3) python: >> print(cv2.__version__)
*Should print out version of openCV in the mahcine

4) python: >> exit()
*Quits python 
