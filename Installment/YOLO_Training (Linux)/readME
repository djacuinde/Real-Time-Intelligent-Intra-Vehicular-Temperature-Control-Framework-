##### Entire source code are in direcoty : ~Desktop/Code/  #####
##### ~/CODE/opencv
##### ~/CODE/opencv_contrib
##### ~/CODE/darknet


//********************************* Update 16.04 Ubuntu by running *******************************//
:~ $ sudo apt-get update
:~ $ sudo apt-get upgrade

//********************************* Install PIP by running  *******************************//
:~ $ sudo apt-get -y install python3-pip
:~ $ pip3 install --upgrade pip
:~ $ pip3 --version

//********************************* Install GIT by running *******************************//
:~ $ sudo apt-get -y install git
:~ $ git --version


//********************************* Install CMAKE by running *******************************//
:~ $ sudo apt-get -y install cmake
:~ $ cmake --version 

//********************************* Install VIM by running *******************************//
:~ $ sudo apt search vim
:~ $ sudo apt-get -y install vim
:~ $ vim --version

######## COMMANDS: ###########
save: :w
save and exit: :wq
exit: :q
force: ! (example :w! :q!)
copy: y
copy a line: yy
paste: p
cut: d
cut a line: dd

//********************************* Install OpenCV using source by running *******************************//
:~ $ sudo apt-get install cmake
:~ $ sudo apt-get install gcc g++

:~ $ sudo apt-get -y install python3-dev python3-numpy
:~ $ sudo apt-get -y install libavcodec-dev libavformat-dev libswscale-dev
:~ $ sudo apt-get -y install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev

:~ $ sudo apt-get -y install libgtk-3-dev


:~ $ sudo apt-get -y install libpng-dev libjpeg-dev libopenexr-dev libtiff-dev libwebp-dev
##### Other Optional Dependecies #####

:~Code $ git clone https://github.com/opencv/opencv.git

:~Code $ git clone https://github.com/opencv/opencv_contrib.git
#####Optional, if opencv_contrib modules are needed

:~Code $ cd opencv

Open "CMakeLists.txt" and search for "OPENCV_GENERATE_PKGCONFIG" and set parameter to "ON" then SAVE
#This creates the opencv.pc file for pkg config 

:~Code/opencv $ mkdir build
:~Code/opencv $ cd build
:~Code/opencv/build $ cmake ../
#Configure CMAKE with default parameters set by CMakeLists.txt
#OUTPUTS "Configuring done" and "Generating done"

#####SKIP THIS#####
#####:~Code/opencv/build $ cmake -D CMAKE_BUILD_TYPE=Release -D OPENCV_GENERATE_PKGCONFIG=ON -D OPENCV_EXTRA_MODULES_PATH=~/Desktop/Code/opencv_contrib/modules -D CMAKE_INSTALL_PREFIX=~/Desktop/Code/opencv
#####CMAKE with custom parameters, not tested yet!!!!

:~Code/opencv/build $ make
#build the opencv files

:~Code/opencv/build $ sudo make install 
#install the compiled source files

:~Code/opencv/build $ sudo apt-get install libopencv-dev

:~ $ python3 
>> import cv2
#If unable, make sure opencv path is added to environment by VIM 
# :~ $ sudo vim /etc/environment 
# add path to this file and SAVE

>> print(cv2.__version__)
#Outputs cv2 version on the machine, opencv works!

//********************************* Install darknet using source by running *******************************//
:~Code $ git clone https://github.com/AlexeyAB/darknet.git
#For some reason darknet from https://github.com/pjreddie/darknet.git has conv. segment faults when executing. 
:~Code $ cd darknet

##
##### OPEN darknet's MakeFile and edit "OPENCV = 1" of top of file then SAVE #####
##

:~Code/darknet $ make
# Let BUILD darknet source files!

:~Code/darknet $./darknet
# OUTPUT: " usage: ./darknet <function>" meaning works!

# Download the weight file of the desired YOLO model by the link: https://pjreddie.com/darknet/yolo/ 
# Once downloaded, move the weight file to darknet source directory (:~Code/darknet)

#Run Detector
:~Code/darknet $ ./darknet detect cfg/<Model.cfg> <Model.weights> data/<Image to Test>
e.g. :~Code/darknet $ ./darknet detect cfg/yolov3-tiny.cfg yolov3-tiny.weights data/dog.jpresh  

#Outputs the prediction made in image "dog.jpg" and its saved under predictions.png 
#Other input test images: data/eagle.jpg, data/dog.jpg, data/person.jpg, or data/horses.jpg

#Change threshold of predictions (-thresh <value> )
:~Code/darknet $ ./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg -thresh 0 

#Live Video Camera
##### recommended to have both CUDA and OpenCV #####
:~Code/darknet $ ./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights
